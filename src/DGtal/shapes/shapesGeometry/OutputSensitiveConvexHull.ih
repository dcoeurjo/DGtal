/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file OutputSensitiveConvexHull.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/05/04
 *
 * Implementation of inline methods defined in OutputSensitiveConvexHull.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Destructor.
 */
template <typename Sh,typename Sa,typename F>
inline
DGtal::OutputSensitiveConvexHull<Sh,Sa,F>::~OutputSensitiveConvexHull()
{
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/****************************/
template <typename Sh,typename Sa,typename F>
inline
typename DGtal::OutputSensitiveConvexHull<Sh,Sa,F>::Point
DGtal::OutputSensitiveConvexHull<Sh,Sa,F>::findFirstPoint (bool &result, const unsigned int nbMax )
{
  Point resultPoint;
  result = false;
  unsigned int cpt=0;

  do  {
    resultPoint = mySampler.generate();
    if (myShape.orientation( result ) == DGtal::INSIDE)
      {
        result = true;
        return resultPoint;
      }
    cpt++;
  } while (cpt < nbMax);
  
  return Point();    
}

/****************************/
template <typename Sh,typename Sa,typename F>
inline
typename DGtal::OutputSensitiveConvexHull<Sh,Sa,F>::Point 
DGtal::OutputSensitiveConvexHull<Sh,Sa,F>::findFirstPointOnContour(const Point &anInsidePoint, const DGtal::Dimension aDimension) const
{
  Point res = anInsidePoint;
  recursiveFindOnRay( res, anInsidePoint[aDimension], mySampler.domain().upperBound()[aDimension]);

  return res;
}

/****************************/
template <typename Sh,typename Sa,typename F>
inline
void
DGtal::OutputSensitiveConvexHull<Sh,Sa,F>::recursiveFindOnRay(Point &aPoint,
                                                              const Coordinate minId,
                                                              const Coordinate maxId,
                                                              const DGtal::Dimension dimension) const
{
  if ((maxId - minId) <= 1)
    {
      aPoint[dimension] = minId;
      return ;
    }
  
  Coordinate pos = (maxId - minId) /2;
  aPoint[dimension] = pos;
  if (myShape.orientation( aPoint ) == DGtal::INSIDE)
    return recursiveFindOnRay(aPoint, pos, maxId);
  else
    return recursiveFindOnRay(aPoint, minId, pos);
}

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename Sh,typename Sa,typename F>
inline
void
DGtal::OutputSensitiveConvexHull<Sh,Sa,F>::selfDisplay ( std::ostream & out ) const
{
  out << "[OutputSensitiveConvexHull]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename Sh,typename Sa,typename F>
inline
bool
DGtal::OutputSensitiveConvexHull<Sh,Sa,F>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename Sh,typename Sa,typename F>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const OutputSensitiveConvexHull<Sh,Sa,F> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


