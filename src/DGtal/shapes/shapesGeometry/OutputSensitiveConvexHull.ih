/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file OutputSensitiveConvexHull.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/05/04
 *
 * Implementation of inline methods defined in OutputSensitiveConvexHull.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Destructor.
 */
template <typename Sh,typename Sa>
inline
DGtal::OutputSensitiveConvexHull<Sh,Sa>::~OutputSensitiveConvexHull()
{
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/****************************/
template <typename Sh,typename Sa>
inline
typename DGtal::OutputSensitiveConvexHull<Sh,Sa>::Point
DGtal::OutputSensitiveConvexHull<Sh,Sa>::findFirstPoint (bool &result, const unsigned int nbMax )
{
  Point resultPoint;
  result = false;
  unsigned int cpt=0;

  do  {
    resultPoint = mySampler.generate();
    if (myShape.orientation( resultPoint ) == DGtal::INSIDE)
      {
        result = true;
        return resultPoint;
      }
    cpt++;
  } while (cpt < nbMax);
  
  return Point();    
}

/****************************/
template <typename Sh,typename Sa>
inline
typename DGtal::OutputSensitiveConvexHull<Sh,Sa>::Point
DGtal::OutputSensitiveConvexHull<Sh,Sa>::nextCVXPoint (const Point & previousPoint )
{
  

  
  return Point();    
}

/************************************/   
template <typename Sh,typename Sa>
inline
typename DGtal::OutputSensitiveConvexHull<Sh,Sa>::Point 
DGtal::OutputSensitiveConvexHull<Sh,Sa>::digitalRayShooting(const Vector &Piminus1,
                                                            const Point &Piminus2) const
{
  Point Pi = Piminus2;
  Coordinate lambdax, lambday;

  if (Piminus1[0] > 0 )
    lambdax  = static_cast<Coordinate> (ceil ( (  mySampler.domain().upperBound()[0] -
                                                  Piminus2[0]) /
                                               Piminus1[0])
                                        ); 
  else
    if (Piminus1[0] < 0 )
    lambdax  = static_cast<Coordinate> (ceil ( ( mySampler.domain().lowerBound()[0]  - Piminus2[0]) /
                                               Piminus1[0])
                                        ); 
    else 
      lambdax = mySampler.domain().upperBound()[0] - mySampler.domain().lowerBound()[0];
  
  if (Piminus1[1] > 0 )
    lambday  = static_cast<Coordinate> (ceil ( (  mySampler.domain().upperBound()[1] - Piminus2[1]) /
                                               Piminus1[1])
                                        ); 
  else
    if (Piminus1[1] < 0 )
    lambday  = static_cast<Coordinate> (ceil ( (  mySampler.domain().lowerBound()[1] - Piminus2[1]) /
                                               Piminus1[1])
                                        ); 
    else 
      lambday = mySampler.domain().upperBound()[1] - mySampler.domain().lowerBound()[1];
  
  
  recursiveDigitalRayShooting(Pi, Piminus1, myShape.orientation( Piminus2 ), std::min( lambdax, lambday));

  return Pi;
}
   



/****************************/
template <typename Sh,typename Sa>
inline
void
DGtal::OutputSensitiveConvexHull<Sh,Sa>::recursiveDigitalRayShooting(Point &Pi,
                                                                       const Vector &Piminus1,  
                                                                       const DGtal::Orientation Piminus2Orientation,
                                                                       const Coordinate intervalSize) const
{

  //  trace.info() << "InterSize = "<<intervalSize<< " Pi = "<<Pi<<std::endl;
  if ( intervalSize <= 1 )
      return ;
     
  Point Piprev = Pi;
  Point pp =  Piminus1;
  pp *= static_cast<Coordinate>(intervalSize/2);
  Pi = Pi + pp;
  
  if (myShape.orientation( Pi ) == Piminus2Orientation)

    return recursiveDigitalRayShooting(Pi, Piminus1, Piminus2Orientation, intervalSize - intervalSize / 2 );
  else
    {
      Pi = Piprev;
      return recursiveDigitalRayShooting(Pi,Piminus1, Piminus2Orientation, intervalSize /2 );
    }
}


/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename Sh,typename Sa>
inline
void
DGtal::OutputSensitiveConvexHull<Sh,Sa>::selfDisplay ( std::ostream & out ) const
{
  out << "[OutputSensitiveConvexHull]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename Sh,typename Sa>
inline
bool
DGtal::OutputSensitiveConvexHull<Sh,Sa>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename Sh,typename Sa>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const OutputSensitiveConvexHull<Sh,Sa> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


